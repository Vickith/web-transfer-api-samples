{
  "name": "Web-transfer-api-samples",
  "tagline": "Samples to show how to integrate Signiant Web Transfer API into a web application.",
  "body": "### Signiant Transfer API\r\n\r\n## Objects\r\n* Signiant.Mst.Messages\r\n* Signiant.Mst.Transfer\r\n* Signiant.Mst.Upload\r\n* Signiant.Mst.Download\r\n\r\n## Other\r\n* Basic events generated by the Transfer API\r\n* Error events generated by the Transfer API\r\n* Messages used by the Transfer API\r\n\r\n### Support or Contact\r\nHaving trouble with the Signiant Web Transfer API? Contact Signiant Support for help.\r\n\r\n### Signiant.Mst.Upload\r\nThis class extends Signiant.Mst.Transfer. \r\n\r\nThis object allows you to perform an accelerated upload using the Transfer API. The Signiant.Mst.Upload object exposes functions to accomplish things such as choosing the files/folders to be uploaded, setting the destination for the uploaded files/folders, configuring the authentication credentials for the destination server, etc. \r\n\r\nOne Signiant.Mst.Upload object must be created per upload.\r\n\r\n```javascript\r\ntransferObject = new Signiant.Mst.Upload();\r\n```\r\n\r\n## Methods\r\n#clearFiles \r\nThis will clear the files/folders specified in the filesArray parameter, from the list of files to be uploaded. The files/folders must be specified using their full paths in the filesArray parameter. An exception is thrown if the filesArray parameter is undefined or datatype of filesArray is not an Array.\r\n```javascript\r\nclearFiles(filesArray)\r\n```\r\n\r\n#clearAllFiles\r\nClears all the files from the list of files to be uploaded.\r\n```javascript\r\nclearAllFiles \r\n```\r\n\r\n#chooseUploadFiles\r\nThis function launches the platform-specific file-chooser so that the user can select the files/folders to be uploaded.  Once the user has selected the desired files/folders the callbackFunction is invoked. If the user did not select any files/folders, the callbackFunc is not invoked.\r\n```javascript\r\nchooseUploadFiles(callbackFunction) \r\n```\r\nreturns\r\n```\r\ncallbackFunction(eventType,selectedFiles)\r\n```\r\nselectedFiles is a JSON array of objects\r\n```javascript\r\n{ \r\n  \"name\":\"upload.txt\",\r\n  \"path\":\"/tmp/upload.txt\",\r\n  \"isDirectory\":\"false\",\r\n  \"size\":\"10190\"\r\n}\r\n```\r\n\r\n# setFilesToUpload\r\nStarts the upload of the specified files/folders to the destination server.  If the specified API key is not valid, or if the Signiant App is not installed, an exception is thrown. This function simply notifies the Signiant App to begin the transfer, and then returns. Further notifications related to the state/progress of the transfer can be retrieved by registering event listeners with the subscribeForBasicEvents and subscribeForTransferProgress functions.\r\n\r\n## Signiant.Mst.Download\r\nThis class extends Signiant.Mst.Transfer. \r\n\r\nThis object allows the programmer to perform an accelerated download using the Transfer API. The Signiant.Mst.Download object exposes functions to accomplish things such as picking the destination folder for downloaded files/folders, setting the authentication credentials for the destination server, etc. \r\n\r\nOne Signiant.Mst.Download object must be created per download.\r\n\r\n```javascript\r\ntransferObject = new Signiant.Mst.Download();\r\n```\r\n\r\n## Methods\r\n#clearFiles \r\nThis will clear the files/folders specified in the filesArray parameter, from the list of files to be uploaded. The files/folders must be specified using their full paths in the filesArray parameter. An exception is thrown if the filesArray parameter is undefined or datatype of filesArray is not an Array.\r\n```javascript\r\nclearFiles(filesArray)\r\n```\r\n\r\n#clearAllFiles\r\nClears all the files from the list of files to be uploaded.\r\n```javascript\r\nclearAllFiles \r\n```\r\n\r\n#getFilesCollisionHandlingMode\r\nReturns the value of the configuration property that determines how file-name collisions are handled for downloaded content. The following values can be returned: version and overwrite.\r\n\r\n#getFilePathHandlingMode\r\nReturns the value of the configuration property that determines the folder-structure that is recreated for downloaded content. The following values can be returned: FLAT, PATH and FULL.\r\n\r\n#setDownloadFolder\r\nSets the value of the configuration property that determines where the downloaded content will go.\r\n```\r\ntransferObject.setDownloadFolder(\"/home/user\")\r\n```\r\n\r\n#setFileCollisionHandlingMode\r\nSets the value of the configuration property that determines how file-name collisions are handled for downloaded content. Valid values for mode are: version and overwrite. \r\n\r\nThe mode value behavior is:\r\n* version: If the name of a file/folder being downloaded collides with a file/folder that already exists in the destination directory, then a version suffix is appended to the name of the file/folder being downloaded. \r\n* overwrite: If the name of a file/folder being downloaded collides with a file/folder that already exists in the destination directory, then the pre-existing file/folder is overwritten with the file/folder being downloaded.\r\nAn exception is thrown if mode is undefined, empty or invalid.\r\n```\r\ntransferObject.setFileCollisionHandlingMode('version')\r\n```\r\n\r\n#setFilePathHandlingMode\r\nSets the value of the configuration property that determines the folder-structure that is recreated for downloaded content. Valid values for mode are: FLAT, PATH and FULL. An exception is thrown if mode is undefined, empty or invalid.\r\n\r\nThe mode value behavior is:\r\n* FLAT: All downloaded content goes directly into the directory specified in the invocation of the setDownloadFolder method. See setFileCollisionHandlingMode for more information on using file-name collision handling with FLAT file-path handling mode.\r\n* PATH: All downloaded content goes into the directory specified in the invocation of the setDownloadFolder method, but the relative path of the content is duplicated, as it exists in the content repository on the source server.\r\n* FULL: All downloaded content goes into the directory specified in the invocation of the setDownloadFolder method, but the full path of the content is duplicated, as it exists in the content repository on the source server.\r\n```\r\ntransferObject.setFilePathHandlingMode('FLAT')\r\n```\r\n\r\n#setFilesToDownload\r\nThis function allows you to specify the files/folders to be downloaded. The files/folders must be specified using the full path in the filePathArray parameter, and must exist on the source server from where they are being downloaded.\r\n```javascript\r\ntransferObject.setFilesToDownload(ArrayOfFiles)\r\n```\r\n# startDownload\r\nStarts the download of the specified files/folders from the source server to the user's destination directory. If the specified API key is not valid, or if the Signiant App is not installed, an exception is thrown. This function simply notifies the Media Shuttle Transfer Plug-in to begin the transfer, and then returns. Further notifications related to the state/progress of the transfer can be retrieved by registering event listeners with the subscribeForBasicEvents and subscribeForTransferProgress functions.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}